
My Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000904  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  00000904  00000978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000009f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a24  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a2c  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a59  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000da0  00000000  00000000  0000301d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e8  00000000  00000000  00003dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000074f  00000000  00000000  000040a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010cc  00000000  00000000  000047f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  000058c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3d       	cpi	r26, 0xDA	; 218
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 80 04 	jmp	0x900	; 0x900 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "main.h"



 int main(void)
 {
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	66 97       	sbiw	r28, 0x16	; 22
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	 LED_config_t IN1;
	 IN1.PORT=DIO_u8_PORTD;
  96:	13 e0       	ldi	r17, 0x03	; 3
  98:	19 83       	std	Y+1, r17	; 0x01
	 IN1.Pin_num=DIO_u8_PIN0;
  9a:	1a 82       	std	Y+2, r1	; 0x02
	 IN1.ConnType=SRS_conn;
  9c:	1b 82       	std	Y+3, r1	; 0x03
	 	 LED_u8Init(&IN1);
  9e:	ce 01       	movw	r24, r28
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LED_u8Init>


	 LED_config_t IN2;
	 IN2.PORT=DIO_u8_PORTD;
  a6:	1c 83       	std	Y+4, r17	; 0x04
	 IN2.Pin_num=DIO_u8_PIN1;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	8d 83       	std	Y+5, r24	; 0x05
	 IN2.ConnType=SRS_conn;
  ac:	1e 82       	std	Y+6, r1	; 0x06
	 
	 LED_u8Init(&IN2);
  ae:	ce 01       	movw	r24, r28
  b0:	04 96       	adiw	r24, 0x04	; 4
  b2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LED_u8Init>
	 
	
	 	 

	 
		 uint8_t Local_u8UnLockCharacter[] = {                      //unLock  Character
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	e0 e6       	ldi	r30, 0x60	; 96
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	de 01       	movw	r26, r28
  be:	17 96       	adiw	r26, 0x07	; 7
  c0:	01 90       	ld	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	8a 95       	dec	r24
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x3e>
			 0b00011111,
			 0b00011111,
			 0b00011111,
			 0b00000000,
		 };
		 uint8_t Local_u8LockCharacter[] = {                      //Lock  Character
  c8:	88 e0       	ldi	r24, 0x08	; 8
  ca:	e8 e6       	ldi	r30, 0x68	; 104
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	de 01       	movw	r26, r28
  d0:	1f 96       	adiw	r26, 0x0f	; 15
  d2:	01 90       	ld	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	8a 95       	dec	r24
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x50>
	 uint8_t local_u8SystemLock = 0; //if the password is ok is =1;


	 

  	 KPD_voidInit();
  da:	0e 94 53 02 	call	0x4a6	; 0x4a6 <KPD_voidInit>
  	 LCD_INIT();
  de:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_INIT>
	   
	 LCD_SetCursor(0,0);
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 18 02 	call	0x430	; 0x430 <LCD_SetCursor>
	 LCD_SEND_STRING(" Enter PASSWORD");
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_SEND_STRING>
	 LCD_SetCursor(0,1);
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 18 02 	call	0x430	; 0x430 <LCD_SetCursor>
	 LCD_SEND_STRING("Key:");
  fa:	80 e9       	ldi	r24, 0x90	; 144
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_SEND_STRING>
  	 uint8_t local_u8PressedKey = 0xff;	//Initilize the Pull up res in the MC for the keypad
	 uint8_t local_u8Counter = 5; //the place of the password
	 uint8_t local_u8Password = 2489; //the place of the password
	 uint8_t local_u8CheckPswd = 0; //to check for the Password
	 uint8_t local_u8flagPswd = 0; //if the password is ok is =1;
	 uint8_t local_u8SystemLock = 0; //if the password is ok is =1;
 102:	f1 2c       	mov	r15, r1
	 

  	 uint8_t local_u8PressedKey = 0xff;	//Initilize the Pull up res in the MC for the keypad
	 uint8_t local_u8Counter = 5; //the place of the password
	 uint8_t local_u8Password = 2489; //the place of the password
	 uint8_t local_u8CheckPswd = 0; //to check for the Password
 104:	00 e0       	ldi	r16, 0x00	; 0
			 0b00000000,
		 };
	 

  	 uint8_t local_u8PressedKey = 0xff;	//Initilize the Pull up res in the MC for the keypad
	 uint8_t local_u8Counter = 5; //the place of the password
 106:	0f 2e       	mov	r0, r31
 108:	f5 e0       	ldi	r31, 0x05	; 5
 10a:	ef 2e       	mov	r14, r31
 10c:	f0 2d       	mov	r31, r0
	 LCD_SEND_STRING("Key:");

 
 while(1)
 {
	 if(local_u8SystemLock!=3)
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	f2 16       	cp	r15, r18
 112:	09 f4       	brne	.+2      	; 0x116 <main+0x94>
 114:	b3 c0       	rjmp	.+358    	; 0x27c <main+0x1fa>
	 {
	 LCD_SetCursor(0,0);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 18 02 	call	0x430	; 0x430 <LCD_SetCursor>
	 LCD_SEND_STRING(" Enter PASSWORD");
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_SEND_STRING>
	 LCD_SetCursor(0,1);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 18 02 	call	0x430	; 0x430 <LCD_SetCursor>
	 LCD_SEND_STRING("Key:");
 12e:	80 e9       	ldi	r24, 0x90	; 144
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_SEND_STRING>
 		
	do 
  	{
  	 local_u8PressedKey = KPD_u8GetPressedKey();
 136:	0e 94 6e 02 	call	0x4dc	; 0x4dc <KPD_u8GetPressedKey>
 13a:	18 2f       	mov	r17, r24
  	} while (local_u8PressedKey == 0xff);
 13c:	8f 3f       	cpi	r24, 0xFF	; 255
 13e:	d9 f3       	breq	.-10     	; 0x136 <main+0xb4>
	  
	  
  /*  to print * insted of the number & to get the right password*/
  if(local_u8PressedKey<10)
 140:	8a 30       	cpi	r24, 0x0A	; 10
 142:	70 f4       	brcc	.+28     	; 0x160 <main+0xde>
  {
	  LCD_SetCursor(local_u8Counter,1);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	8e 2d       	mov	r24, r14
 148:	0e 94 18 02 	call	0x430	; 0x430 <LCD_SetCursor>
	  LCD_SEND_DATA('*');
 14c:	8a e2       	ldi	r24, 0x2A	; 42
 14e:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_SEND_DATA>
	  local_u8Counter++;
 152:	e3 94       	inc	r14
	  local_u8CheckPswd=(local_u8CheckPswd*10)+local_u8PressedKey;
 154:	00 0f       	add	r16, r16
 156:	80 2f       	mov	r24, r16
 158:	88 0f       	add	r24, r24
 15a:	88 0f       	add	r24, r24
 15c:	08 0f       	add	r16, r24
 15e:	01 0f       	add	r16, r17
  }
  
  
  /* if the password is OK*/
  if(local_u8PressedKey =='=')
 160:	1d 33       	cpi	r17, 0x3D	; 61
 162:	09 f0       	breq	.+2      	; 0x166 <main+0xe4>
 164:	70 c0       	rjmp	.+224    	; 0x246 <main+0x1c4>
  {
	if(local_u8CheckPswd==local_u8Password)
 166:	09 3b       	cpi	r16, 0xB9	; 185
 168:	09 f0       	breq	.+2      	; 0x16c <main+0xea>
 16a:	4d c0       	rjmp	.+154    	; 0x206 <main+0x184>
	{
	  LCD_CLear();
 16c:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_CLear>
	  LCD_SEND_STRING("   DOOR OPEN ");
 170:	85 e9       	ldi	r24, 0x95	; 149
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_SEND_STRING>
	  LCD_SpecialChar(Local_u8UnLockCharacter,2,7,1);
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	47 e0       	ldi	r20, 0x07	; 7
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	ce 01       	movw	r24, r28
 180:	07 96       	adiw	r24, 0x07	; 7
 182:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_SpecialChar>
	  LED_u8TurnOn(&IN1);
 186:	ce 01       	movw	r24, r28
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <LED_u8TurnOn>
	  LED_u8TurnOff(&IN2);
 18e:	ce 01       	movw	r24, r28
 190:	04 96       	adiw	r24, 0x04	; 4
 192:	0e 94 14 03 	call	0x628	; 0x628 <LED_u8TurnOff>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	3f e7       	ldi	r19, 0x7F	; 127
 198:	86 e9       	ldi	r24, 0x96	; 150
 19a:	98 e9       	ldi	r25, 0x98	; 152
 19c:	31 50       	subi	r19, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x11a>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x124>
 1a6:	00 00       	nop
	  _delay_ms(50000);
	  LCD_CLear();
 1a8:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_CLear>
	  LCD_SEND_STRING("   DOOR ClOSE ");
 1ac:	83 ea       	ldi	r24, 0xA3	; 163
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_SEND_STRING>
	  LCD_SpecialChar(Local_u8LockCharacter,3,7,1);
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	47 e0       	ldi	r20, 0x07	; 7
 1b8:	63 e0       	ldi	r22, 0x03	; 3
 1ba:	ce 01       	movw	r24, r28
 1bc:	0f 96       	adiw	r24, 0x0f	; 15
 1be:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_SpecialChar>
	  LED_u8TurnOn(&IN2);
 1c2:	ce 01       	movw	r24, r28
 1c4:	04 96       	adiw	r24, 0x04	; 4
 1c6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <LED_u8TurnOn>
	  LED_u8TurnOff(&IN1);
 1ca:	ce 01       	movw	r24, r28
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	0e 94 14 03 	call	0x628	; 0x628 <LED_u8TurnOff>
 1d2:	2f e7       	ldi	r18, 0x7F	; 127
 1d4:	36 e9       	ldi	r19, 0x96	; 150
 1d6:	88 e9       	ldi	r24, 0x98	; 152
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	30 40       	sbci	r19, 0x00	; 0
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x156>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x160>
 1e2:	00 00       	nop
	  _delay_ms(50000);
	  LED_u8TurnOff(&IN2);
 1e4:	ce 01       	movw	r24, r28
 1e6:	04 96       	adiw	r24, 0x04	; 4
 1e8:	0e 94 14 03 	call	0x628	; 0x628 <LED_u8TurnOff>
	   LED_u8TurnOff(&IN1);
 1ec:	ce 01       	movw	r24, r28
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	0e 94 14 03 	call	0x628	; 0x628 <LED_u8TurnOff>
	  LCD_CLear();
 1f4:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_CLear>
	  local_u8Counter = 5;
	  local_u8CheckPswd=0;
	  local_u8SystemLock=0;
 1f8:	f1 2c       	mov	r15, r1
	  _delay_ms(50000);
	  LED_u8TurnOff(&IN2);
	   LED_u8TurnOff(&IN1);
	  LCD_CLear();
	  local_u8Counter = 5;
	  local_u8CheckPswd=0;
 1fa:	00 e0       	ldi	r16, 0x00	; 0
	  LED_u8TurnOff(&IN1);
	  _delay_ms(50000);
	  LED_u8TurnOff(&IN2);
	   LED_u8TurnOff(&IN1);
	  LCD_CLear();
	  local_u8Counter = 5;
 1fc:	0f 2e       	mov	r0, r31
 1fe:	f5 e0       	ldi	r31, 0x05	; 5
 200:	ef 2e       	mov	r14, r31
 202:	f0 2d       	mov	r31, r0
 204:	20 c0       	rjmp	.+64     	; 0x246 <main+0x1c4>
	  local_u8CheckPswd=0;
	  local_u8SystemLock=0;
	  		}
	else if(local_u8CheckPswd!=local_u8Password)
 206:	09 3b       	cpi	r16, 0xB9	; 185
 208:	f1 f0       	breq	.+60     	; 0x246 <main+0x1c4>
	{
		LCD_CLear();
 20a:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_CLear>
		LCD_SEND_STRING("	Wrong Password");
 20e:	82 eb       	ldi	r24, 0xB2	; 178
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_SEND_STRING>
		LCD_SpecialChar(Local_u8LockCharacter,3,7,1);
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	47 e0       	ldi	r20, 0x07	; 7
 21a:	63 e0       	ldi	r22, 0x03	; 3
 21c:	ce 01       	movw	r24, r28
 21e:	0f 96       	adiw	r24, 0x0f	; 15
 220:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_SpecialChar>
 224:	9f e7       	ldi	r25, 0x7F	; 127
 226:	26 e9       	ldi	r18, 0x96	; 150
 228:	38 e9       	ldi	r19, 0x98	; 152
 22a:	91 50       	subi	r25, 0x01	; 1
 22c:	20 40       	sbci	r18, 0x00	; 0
 22e:	30 40       	sbci	r19, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x1a8>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x1b2>
 234:	00 00       	nop
		_delay_ms(50000);
		LCD_CLear();
 236:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_CLear>
	    local_u8Counter = 5;
 	    local_u8CheckPswd=0;
		local_u8SystemLock++;
 23a:	f3 94       	inc	r15
		LCD_SEND_STRING("	Wrong Password");
		LCD_SpecialChar(Local_u8LockCharacter,3,7,1);
		_delay_ms(50000);
		LCD_CLear();
	    local_u8Counter = 5;
 	    local_u8CheckPswd=0;
 23c:	00 e0       	ldi	r16, 0x00	; 0
		LCD_CLear();
		LCD_SEND_STRING("	Wrong Password");
		LCD_SpecialChar(Local_u8LockCharacter,3,7,1);
		_delay_ms(50000);
		LCD_CLear();
	    local_u8Counter = 5;
 23e:	0f 2e       	mov	r0, r31
 240:	f5 e0       	ldi	r31, 0x05	; 5
 242:	ef 2e       	mov	r14, r31
 244:	f0 2d       	mov	r31, r0
  /* Set new password*/
  
 
  
  /*  to clear the password on the LCD */
  if(local_u8PressedKey=='c')
 246:	13 36       	cpi	r17, 0x63	; 99
 248:	09 f0       	breq	.+2      	; 0x24c <main+0x1ca>
 24a:	61 cf       	rjmp	.-318    	; 0x10e <main+0x8c>
  {
	LCD_CLear();
 24c:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_CLear>
 LCD_SetCursor(0,0);
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 18 02 	call	0x430	; 0x430 <LCD_SetCursor>
 LCD_SEND_STRING(" Enter PASSWORD");
 258:	80 e8       	ldi	r24, 0x80	; 128
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_SEND_STRING>
 LCD_SetCursor(0,1);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 18 02 	call	0x430	; 0x430 <LCD_SetCursor>
 LCD_SEND_STRING("Key:");
 268:	80 e9       	ldi	r24, 0x90	; 144
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_SEND_STRING>
 local_u8Counter = 5;
 local_u8CheckPswd=0;
 270:	00 e0       	ldi	r16, 0x00	; 0
	LCD_CLear();
 LCD_SetCursor(0,0);
 LCD_SEND_STRING(" Enter PASSWORD");
 LCD_SetCursor(0,1);
 LCD_SEND_STRING("Key:");
 local_u8Counter = 5;
 272:	0f 2e       	mov	r0, r31
 274:	f5 e0       	ldi	r31, 0x05	; 5
 276:	ef 2e       	mov	r14, r31
 278:	f0 2d       	mov	r31, r0
 27a:	49 cf       	rjmp	.-366    	; 0x10e <main+0x8c>
  /*	if(local_u8PressedKey>9 && local_u8PressedKey!='c' && local_u8PressedKey!= '=')
	  {
		 LCD_SEND_DATA(local_u8PressedKey);
	  }
  */
	  }else if(local_u8SystemLock>=3)
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	8f 15       	cp	r24, r15
 280:	08 f0       	brcs	.+2      	; 0x284 <main+0x202>
 282:	45 cf       	rjmp	.-374    	; 0x10e <main+0x8c>
	  {
		  LCD_SEND_STRING(" DOOR LOCKED FOR ");
 284:	82 ec       	ldi	r24, 0xC2	; 194
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_SEND_STRING>
		  LCD_SetCursor(3,1);
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	0e 94 18 02 	call	0x430	; 0x430 <LCD_SetCursor>
		  LCD_SEND_STRING("10MIN");
 294:	84 ed       	ldi	r24, 0xD4	; 212
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_SEND_STRING>
		  LCD_SpecialChar(Local_u8LockCharacter,3,9,1);
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	49 e0       	ldi	r20, 0x09	; 9
 2a0:	63 e0       	ldi	r22, 0x03	; 3
 2a2:	ce 01       	movw	r24, r28
 2a4:	0f 96       	adiw	r24, 0x0f	; 15
 2a6:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_SpecialChar>
 2aa:	9a ea       	ldi	r25, 0xAA	; 170
 2ac:	2a ea       	ldi	r18, 0xAA	; 170
 2ae:	3a ea       	ldi	r19, 0xAA	; 170
 2b0:	8a e2       	ldi	r24, 0x2A	; 42
 2b2:	91 50       	subi	r25, 0x01	; 1
 2b4:	20 40       	sbci	r18, 0x00	; 0
 2b6:	30 40       	sbci	r19, 0x00	; 0
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	d9 f7       	brne	.-10     	; 0x2b2 <main+0x230>
		  
		  _delay_ms(5000000);
		 local_u8SystemLock=0;
		 LCD_CLear();
 2bc:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_CLear>
		  LCD_SetCursor(3,1);
		  LCD_SEND_STRING("10MIN");
		  LCD_SpecialChar(Local_u8LockCharacter,3,9,1);
		  
		  _delay_ms(5000000);
		 local_u8SystemLock=0;
 2c0:	f1 2c       	mov	r15, r1
 2c2:	25 cf       	rjmp	.-438    	; 0x10e <main+0x8c>

000002c4 <Send_Hlfe_DataPort>:
	
	LCD_SEND_COMMAND(0x1c);
} 
void LCD_ScrollLeft(void){
	
	LCD_SEND_COMMAND(0x18);
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	00 d0       	rcall	.+0      	; 0x2ce <Send_Hlfe_DataPort+0xa>
 2ce:	00 d0       	rcall	.+0      	; 0x2d0 <Send_Hlfe_DataPort+0xc>
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	08 2f       	mov	r16, r24
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	89 83       	std	Y+1, r24	; 0x01
 2da:	85 e0       	ldi	r24, 0x05	; 5
 2dc:	8a 83       	std	Y+2, r24	; 0x02
 2de:	86 e0       	ldi	r24, 0x06	; 6
 2e0:	8b 83       	std	Y+3, r24	; 0x03
 2e2:	87 e0       	ldi	r24, 0x07	; 7
 2e4:	8c 83       	std	Y+4, r24	; 0x04
 2e6:	10 e0       	ldi	r17, 0x00	; 0
 2e8:	14 c0       	rjmp	.+40     	; 0x312 <Send_Hlfe_DataPort+0x4e>
 2ea:	40 2f       	mov	r20, r16
 2ec:	50 e0       	ldi	r21, 0x00	; 0
 2ee:	01 2e       	mov	r0, r17
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <Send_Hlfe_DataPort+0x32>
 2f2:	55 95       	asr	r21
 2f4:	47 95       	ror	r20
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <Send_Hlfe_DataPort+0x2e>
 2fa:	41 70       	andi	r20, 0x01	; 1
 2fc:	e1 e0       	ldi	r30, 0x01	; 1
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	ec 0f       	add	r30, r28
 302:	fd 1f       	adc	r31, r29
 304:	e1 0f       	add	r30, r17
 306:	f1 1d       	adc	r31, r1
 308:	60 81       	ld	r22, Z
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_u8SetPinValue>
 310:	1f 5f       	subi	r17, 0xFF	; 255
 312:	14 30       	cpi	r17, 0x04	; 4
 314:	50 f3       	brcs	.-44     	; 0x2ea <Send_Hlfe_DataPort+0x26>
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	08 95       	ret

00000328 <SendEnablePulse>:
 328:	41 e0       	ldi	r20, 0x01	; 1
 32a:	63 e0       	ldi	r22, 0x03	; 3
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_u8SetPinValue>
 332:	83 ef       	ldi	r24, 0xF3	; 243
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <SendEnablePulse+0xe>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <SendEnablePulse+0x14>
 33c:	00 00       	nop
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	63 e0       	ldi	r22, 0x03	; 3
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_u8SetPinValue>
 348:	08 95       	ret

0000034a <LCD_SEND_DATA>:
 34a:	cf 93       	push	r28
 34c:	c8 2f       	mov	r28, r24
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_u8SetPinValue>
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	62 e0       	ldi	r22, 0x02	; 2
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_u8SetPinValue>
 362:	8c 2f       	mov	r24, r28
 364:	82 95       	swap	r24
 366:	8f 70       	andi	r24, 0x0F	; 15
 368:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Send_Hlfe_DataPort>
 36c:	0e 94 94 01 	call	0x328	; 0x328 <SendEnablePulse>
 370:	8c 2f       	mov	r24, r28
 372:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Send_Hlfe_DataPort>
 376:	0e 94 94 01 	call	0x328	; 0x328 <SendEnablePulse>
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <LCD_SEND_COMMAND>:
 37e:	cf 93       	push	r28
 380:	c8 2f       	mov	r28, r24
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_u8SetPinValue>
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	62 e0       	ldi	r22, 0x02	; 2
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_u8SetPinValue>
 396:	8c 2f       	mov	r24, r28
 398:	82 95       	swap	r24
 39a:	8f 70       	andi	r24, 0x0F	; 15
 39c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Send_Hlfe_DataPort>
 3a0:	0e 94 94 01 	call	0x328	; 0x328 <SendEnablePulse>
 3a4:	8c 2f       	mov	r24, r28
 3a6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Send_Hlfe_DataPort>
 3aa:	0e 94 94 01 	call	0x328	; 0x328 <SendEnablePulse>
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <LCD_INIT>:
 3b2:	cf 93       	push	r28
 3b4:	c4 e0       	ldi	r28, 0x04	; 4
 3b6:	06 c0       	rjmp	.+12     	; 0x3c4 <LCD_INIT+0x12>
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	6c 2f       	mov	r22, r28
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 2a 03 	call	0x654	; 0x654 <DIO_u8SetPinDirection>
 3c2:	cf 5f       	subi	r28, 0xFF	; 255
 3c4:	c8 30       	cpi	r28, 0x08	; 8
 3c6:	c0 f3       	brcs	.-16     	; 0x3b8 <LCD_INIT+0x6>
 3c8:	c1 e0       	ldi	r28, 0x01	; 1
 3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <LCD_INIT+0x26>
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	6c 2f       	mov	r22, r28
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 2a 03 	call	0x654	; 0x654 <DIO_u8SetPinDirection>
 3d6:	cf 5f       	subi	r28, 0xFF	; 255
 3d8:	c4 30       	cpi	r28, 0x04	; 4
 3da:	c0 f3       	brcs	.-16     	; 0x3cc <LCD_INIT+0x1a>
 3dc:	8f e0       	ldi	r24, 0x0F	; 15
 3de:	97 e2       	ldi	r25, 0x27	; 39
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <LCD_INIT+0x2e>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <LCD_INIT+0x34>
 3e6:	00 00       	nop
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Send_Hlfe_DataPort>
 3ee:	0e 94 94 01 	call	0x328	; 0x328 <SendEnablePulse>
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Send_Hlfe_DataPort>
 3f8:	0e 94 94 01 	call	0x328	; 0x328 <SendEnablePulse>
 3fc:	88 e0       	ldi	r24, 0x08	; 8
 3fe:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Send_Hlfe_DataPort>
 402:	0e 94 94 01 	call	0x328	; 0x328 <SendEnablePulse>
 406:	8c e0       	ldi	r24, 0x0C	; 12
 408:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_SEND_COMMAND>
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_SEND_COMMAND>
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <LCD_SEND_STRING>:
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	ec 01       	movw	r28, r24
 41c:	03 c0       	rjmp	.+6      	; 0x424 <LCD_SEND_STRING+0xe>
 41e:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_SEND_DATA>
 422:	21 96       	adiw	r28, 0x01	; 1
 424:	88 81       	ld	r24, Y
 426:	81 11       	cpse	r24, r1
 428:	fa cf       	rjmp	.-12     	; 0x41e <LCD_SEND_STRING+0x8>
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <LCD_SetCursor>:
 430:	66 23       	and	r22, r22
 432:	29 f0       	breq	.+10     	; 0x43e <LCD_SetCursor+0xe>
 434:	61 30       	cpi	r22, 0x01	; 1
 436:	21 f4       	brne	.+8      	; 0x440 <LCD_SetCursor+0x10>
 438:	90 e4       	ldi	r25, 0x40	; 64
 43a:	98 0f       	add	r25, r24
 43c:	01 c0       	rjmp	.+2      	; 0x440 <LCD_SetCursor+0x10>
 43e:	98 2f       	mov	r25, r24
 440:	89 2f       	mov	r24, r25
 442:	80 68       	ori	r24, 0x80	; 128
 444:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_SEND_COMMAND>
 448:	08 95       	ret

0000044a <LCD_SpecialChar>:
 44a:	ef 92       	push	r14
 44c:	ff 92       	push	r15
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	8c 01       	movw	r16, r24
 458:	d6 2f       	mov	r29, r22
 45a:	f4 2e       	mov	r15, r20
 45c:	e2 2e       	mov	r14, r18
 45e:	86 2f       	mov	r24, r22
 460:	88 0f       	add	r24, r24
 462:	88 0f       	add	r24, r24
 464:	88 0f       	add	r24, r24
 466:	80 64       	ori	r24, 0x40	; 64
 468:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_SEND_COMMAND>
 46c:	c0 e0       	ldi	r28, 0x00	; 0
 46e:	07 c0       	rjmp	.+14     	; 0x47e <LCD_SpecialChar+0x34>
 470:	f8 01       	movw	r30, r16
 472:	ec 0f       	add	r30, r28
 474:	f1 1d       	adc	r31, r1
 476:	80 81       	ld	r24, Z
 478:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_SEND_DATA>
 47c:	cf 5f       	subi	r28, 0xFF	; 255
 47e:	c8 30       	cpi	r28, 0x08	; 8
 480:	b8 f3       	brcs	.-18     	; 0x470 <LCD_SpecialChar+0x26>
 482:	6e 2d       	mov	r22, r14
 484:	8f 2d       	mov	r24, r15
 486:	0e 94 18 02 	call	0x430	; 0x430 <LCD_SetCursor>
 48a:	8d 2f       	mov	r24, r29
 48c:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_SEND_DATA>
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	08 95       	ret

0000049e <LCD_CLear>:

}
void LCD_CLear(void){
	LCD_SEND_COMMAND(0x01);
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_SEND_COMMAND>
 4a4:	08 95       	ret

000004a6 <KPD_voidInit>:
#include "KEYPAD_config.h"
#include "KEYPAD_interface.h"
#include "KEYPAD_privet.h"

void KPD_voidInit(void)
{
 4a6:	cf 93       	push	r28
	uint8_t Local_u8Counter;
	for(Local_u8Counter = KPD_u8_R0_PIN ; Local_u8Counter <= KPD_u8_R3_PIN ; Local_u8Counter++)
 4a8:	c0 e0       	ldi	r28, 0x00	; 0
 4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <KPD_voidInit+0x12>
	DIO_u8SetPinDirection(KPD_U8_PORT,Local_u8Counter,DIO_u8_PIN_INPUT);
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	6c 2f       	mov	r22, r28
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	0e 94 2a 03 	call	0x654	; 0x654 <DIO_u8SetPinDirection>
#include "KEYPAD_privet.h"

void KPD_voidInit(void)
{
	uint8_t Local_u8Counter;
	for(Local_u8Counter = KPD_u8_R0_PIN ; Local_u8Counter <= KPD_u8_R3_PIN ; Local_u8Counter++)
 4b6:	cf 5f       	subi	r28, 0xFF	; 255
 4b8:	c4 30       	cpi	r28, 0x04	; 4
 4ba:	c0 f3       	brcs	.-16     	; 0x4ac <KPD_voidInit+0x6>
 4bc:	c4 e0       	ldi	r28, 0x04	; 4
 4be:	06 c0       	rjmp	.+12     	; 0x4cc <KPD_voidInit+0x26>
	DIO_u8SetPinDirection(KPD_U8_PORT,Local_u8Counter,DIO_u8_PIN_INPUT);
	
	for(Local_u8Counter = KPD_u8_C0_PIN ; Local_u8Counter <= KPD_u8_C3_PIN ; Local_u8Counter++)
	DIO_u8SetPinDirection(KPD_U8_PORT,Local_u8Counter,DIO_u8_PIN_OUTPUT);
 4c0:	41 e0       	ldi	r20, 0x01	; 1
 4c2:	6c 2f       	mov	r22, r28
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	0e 94 2a 03 	call	0x654	; 0x654 <DIO_u8SetPinDirection>
{
	uint8_t Local_u8Counter;
	for(Local_u8Counter = KPD_u8_R0_PIN ; Local_u8Counter <= KPD_u8_R3_PIN ; Local_u8Counter++)
	DIO_u8SetPinDirection(KPD_U8_PORT,Local_u8Counter,DIO_u8_PIN_INPUT);
	
	for(Local_u8Counter = KPD_u8_C0_PIN ; Local_u8Counter <= KPD_u8_C3_PIN ; Local_u8Counter++)
 4ca:	cf 5f       	subi	r28, 0xFF	; 255
 4cc:	c8 30       	cpi	r28, 0x08	; 8
 4ce:	c0 f3       	brcs	.-16     	; 0x4c0 <KPD_voidInit+0x1a>
	DIO_u8SetPinDirection(KPD_U8_PORT,Local_u8Counter,DIO_u8_PIN_OUTPUT);
	
	DIO_u8SetPortValue(KPD_U8_PORT,0xff);
 4d0:	6f ef       	ldi	r22, 0xFF	; 255
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	0e 94 2c 04 	call	0x858	; 0x858 <DIO_u8SetPortValue>
}
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <KPD_u8GetPressedKey>:

uint8_t KPD_u8GetPressedKey(void)
{
 4dc:	af 92       	push	r10
 4de:	bf 92       	push	r11
 4e0:	cf 92       	push	r12
 4e2:	df 92       	push	r13
 4e4:	ef 92       	push	r14
 4e6:	ff 92       	push	r15
 4e8:	0f 93       	push	r16
 4ea:	1f 93       	push	r17
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62
 4f4:	69 97       	sbiw	r28, 0x19	; 25
 4f6:	0f b6       	in	r0, 0x3f	; 63
 4f8:	f8 94       	cli
 4fa:	de bf       	out	0x3e, r29	; 62
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	cd bf       	out	0x3d, r28	; 61
	uint8_t Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState,Local_u8PressedKey=KPD_u8_NO_PRESSED_KEY_VAL;
	
	uint8_t Local_u8ColArr[KPD_u8_COL_NUM]={KPD_u8_C0_PIN,KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN};
 500:	84 e0       	ldi	r24, 0x04	; 4
 502:	8a 83       	std	Y+2, r24	; 0x02
 504:	85 e0       	ldi	r24, 0x05	; 5
 506:	8b 83       	std	Y+3, r24	; 0x03
 508:	86 e0       	ldi	r24, 0x06	; 6
 50a:	8c 83       	std	Y+4, r24	; 0x04
 50c:	87 e0       	ldi	r24, 0x07	; 7
 50e:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t Local_u8RowArr[KPD_u8_ROW_NUM]={KPD_u8_R0_PIN,KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN};
 510:	1e 82       	std	Y+6, r1	; 0x06
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	8f 83       	std	Y+7, r24	; 0x07
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	88 87       	std	Y+8, r24	; 0x08
 51a:	83 e0       	ldi	r24, 0x03	; 3
 51c:	89 87       	std	Y+9, r24	; 0x09
		
	uint8_t Local_KpdArr[KPD_u8_ROW_NUM][KPD_u8_COL_NUM] = KPD_u8_BUTTON_VAL;
 51e:	80 e1       	ldi	r24, 0x10	; 16
 520:	e0 e7       	ldi	r30, 0x70	; 112
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	de 01       	movw	r26, r28
 526:	1a 96       	adiw	r26, 0x0a	; 10
 528:	01 90       	ld	r0, Z+
 52a:	0d 92       	st	X+, r0
 52c:	8a 95       	dec	r24
 52e:	e1 f7       	brne	.-8      	; 0x528 <KPD_u8GetPressedKey+0x4c>

	for(Local_u8ColumnIdx = 0 ; Local_u8ColumnIdx < KPD_u8_COL_NUM ; Local_u8ColumnIdx++)
 530:	b1 2c       	mov	r11, r1
 532:	47 c0       	rjmp	.+142    	; 0x5c2 <KPD_u8GetPressedKey+0xe6>
	{
		/* Activate the current column */
		DIO_u8SetPinValue(KPD_U8_PORT,Local_u8ColArr[Local_u8ColumnIdx],DIO_u8_PIN_LOW);
 534:	cb 2c       	mov	r12, r11
 536:	d1 2c       	mov	r13, r1
 538:	e2 e0       	ldi	r30, 0x02	; 2
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	ec 0f       	add	r30, r28
 53e:	fd 1f       	adc	r31, r29
 540:	ec 0d       	add	r30, r12
 542:	fd 1d       	adc	r31, r13
 544:	a0 80       	ld	r10, Z
 546:	40 e0       	ldi	r20, 0x00	; 0
 548:	6a 2d       	mov	r22, r10
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_u8SetPinValue>
		for(Local_u8RowIdx = 0 ; Local_u8RowIdx < KPD_u8_ROW_NUM; Local_u8RowIdx++)
 550:	10 e0       	ldi	r17, 0x00	; 0
 552:	2f c0       	rjmp	.+94     	; 0x5b2 <KPD_u8GetPressedKey+0xd6>
		{
			/*Read the current row*/
			DIO_u8GetPinValue(KPD_U8_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
 554:	e1 2e       	mov	r14, r17
 556:	f1 2c       	mov	r15, r1
 558:	e6 e0       	ldi	r30, 0x06	; 6
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	ec 0f       	add	r30, r28
 55e:	fd 1f       	adc	r31, r29
 560:	ee 0d       	add	r30, r14
 562:	ff 1d       	adc	r31, r15
 564:	00 81       	ld	r16, Z
 566:	ae 01       	movw	r20, r28
 568:	4f 5f       	subi	r20, 0xFF	; 255
 56a:	5f 4f       	sbci	r21, 0xFF	; 255
 56c:	60 2f       	mov	r22, r16
 56e:	82 e0       	ldi	r24, 0x02	; 2
 570:	0e 94 42 04 	call	0x884	; 0x884 <DIO_u8GetPinValue>
			
			/*check if a button is pressed*/
			
			if(Local_u8PinState == DIO_u8_PIN_LOW)
 574:	89 81       	ldd	r24, Y+1	; 0x01
 576:	81 11       	cpse	r24, r1
 578:	1b c0       	rjmp	.+54     	; 0x5b0 <KPD_u8GetPressedKey+0xd4>
			{
				Local_u8PressedKey = Local_KpdArr[Local_u8RowIdx][Local_u8ColumnIdx];
 57a:	ee 0c       	add	r14, r14
 57c:	ff 1c       	adc	r15, r15
 57e:	ee 0c       	add	r14, r14
 580:	ff 1c       	adc	r15, r15
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	8c 0f       	add	r24, r28
 588:	9d 1f       	adc	r25, r29
 58a:	e8 0e       	add	r14, r24
 58c:	f9 1e       	adc	r15, r25
 58e:	f7 01       	movw	r30, r14
 590:	ec 0d       	add	r30, r12
 592:	fd 1d       	adc	r31, r13
 594:	11 85       	ldd	r17, Z+9	; 0x09
				
				/*wait until the key is released(polling or busy waiting)*/
				while(Local_u8PinState == DIO_u8_PIN_LOW)
 596:	07 c0       	rjmp	.+14     	; 0x5a6 <KPD_u8GetPressedKey+0xca>
				{
					DIO_u8GetPinValue(KPD_U8_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
 598:	ae 01       	movw	r20, r28
 59a:	4f 5f       	subi	r20, 0xFF	; 255
 59c:	5f 4f       	sbci	r21, 0xFF	; 255
 59e:	60 2f       	mov	r22, r16
 5a0:	82 e0       	ldi	r24, 0x02	; 2
 5a2:	0e 94 42 04 	call	0x884	; 0x884 <DIO_u8GetPinValue>
			if(Local_u8PinState == DIO_u8_PIN_LOW)
			{
				Local_u8PressedKey = Local_KpdArr[Local_u8RowIdx][Local_u8ColumnIdx];
				
				/*wait until the key is released(polling or busy waiting)*/
				while(Local_u8PinState == DIO_u8_PIN_LOW)
 5a6:	99 81       	ldd	r25, Y+1	; 0x01
 5a8:	99 23       	and	r25, r25
 5aa:	b1 f3       	breq	.-20     	; 0x598 <KPD_u8GetPressedKey+0xbc>
				{
					DIO_u8GetPinValue(KPD_U8_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
				}
				
				return Local_u8PressedKey;
 5ac:	81 2f       	mov	r24, r17
 5ae:	0e c0       	rjmp	.+28     	; 0x5cc <KPD_u8GetPressedKey+0xf0>

	for(Local_u8ColumnIdx = 0 ; Local_u8ColumnIdx < KPD_u8_COL_NUM ; Local_u8ColumnIdx++)
	{
		/* Activate the current column */
		DIO_u8SetPinValue(KPD_U8_PORT,Local_u8ColArr[Local_u8ColumnIdx],DIO_u8_PIN_LOW);
		for(Local_u8RowIdx = 0 ; Local_u8RowIdx < KPD_u8_ROW_NUM; Local_u8RowIdx++)
 5b0:	1f 5f       	subi	r17, 0xFF	; 255
 5b2:	14 30       	cpi	r17, 0x04	; 4
 5b4:	78 f2       	brcs	.-98     	; 0x554 <KPD_u8GetPressedKey+0x78>
				return Local_u8PressedKey;
			}
		}
		
		/* Deactivate the current column*/
		DIO_u8SetPinValue(KPD_U8_PORT,Local_u8ColArr[Local_u8ColumnIdx],DIO_u8_PIN_HIGH);
 5b6:	41 e0       	ldi	r20, 0x01	; 1
 5b8:	6a 2d       	mov	r22, r10
 5ba:	82 e0       	ldi	r24, 0x02	; 2
 5bc:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_u8SetPinValue>
	uint8_t Local_u8ColArr[KPD_u8_COL_NUM]={KPD_u8_C0_PIN,KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN};
	uint8_t Local_u8RowArr[KPD_u8_ROW_NUM]={KPD_u8_R0_PIN,KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN};
		
	uint8_t Local_KpdArr[KPD_u8_ROW_NUM][KPD_u8_COL_NUM] = KPD_u8_BUTTON_VAL;

	for(Local_u8ColumnIdx = 0 ; Local_u8ColumnIdx < KPD_u8_COL_NUM ; Local_u8ColumnIdx++)
 5c0:	b3 94       	inc	r11
 5c2:	93 e0       	ldi	r25, 0x03	; 3
 5c4:	9b 15       	cp	r25, r11
 5c6:	08 f0       	brcs	.+2      	; 0x5ca <KPD_u8GetPressedKey+0xee>
 5c8:	b5 cf       	rjmp	.-150    	; 0x534 <KPD_u8GetPressedKey+0x58>
		
		/* Deactivate the current column*/
		DIO_u8SetPinValue(KPD_U8_PORT,Local_u8ColArr[Local_u8ColumnIdx],DIO_u8_PIN_HIGH);
	}
	
	return Local_u8PressedKey;
 5ca:	8f ef       	ldi	r24, 0xFF	; 255
 5cc:	69 96       	adiw	r28, 0x19	; 25
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	f8 94       	cli
 5d2:	de bf       	out	0x3e, r29	; 62
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	cd bf       	out	0x3d, r28	; 61
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	1f 91       	pop	r17
 5de:	0f 91       	pop	r16
 5e0:	ff 90       	pop	r15
 5e2:	ef 90       	pop	r14
 5e4:	df 90       	pop	r13
 5e6:	cf 90       	pop	r12
 5e8:	bf 90       	pop	r11
 5ea:	af 90       	pop	r10
 5ec:	08 95       	ret

000005ee <LED_u8Init>:
#include "LED_interface.h"
#include "LED_privet.h"

void LED_u8Init(const LED_config_t *Copy_LED_obj)
{
	DIO_u8SetPinDirection(Copy_LED_obj->PORT,Copy_LED_obj->Pin_num,DIO_u8_PIN_OUTPUT);
 5ee:	41 e0       	ldi	r20, 0x01	; 1
 5f0:	fc 01       	movw	r30, r24
 5f2:	61 81       	ldd	r22, Z+1	; 0x01
 5f4:	80 81       	ld	r24, Z
 5f6:	0e 94 2a 03 	call	0x654	; 0x654 <DIO_u8SetPinDirection>
 5fa:	08 95       	ret

000005fc <LED_u8TurnOn>:
}

uint8_t LED_u8TurnOn(const LED_config_t *Copy_LED_obj)
{
 5fc:	fc 01       	movw	r30, r24
	uint8_t Local_u8ErrorState = OK;
	if (Copy_LED_obj-> ConnType==SRS_conn)   /*check for the connection type*/
 5fe:	92 81       	ldd	r25, Z+2	; 0x02
 600:	91 11       	cpse	r25, r1
 602:	07 c0       	rjmp	.+14     	; 0x612 <LED_u8TurnOn+0x16>
	{
		DIO_u8SetPinValue(Copy_LED_obj->PORT,Copy_LED_obj->Pin_num,DIO_u8_PIN_HIGH);
 604:	41 e0       	ldi	r20, 0x01	; 1
 606:	61 81       	ldd	r22, Z+1	; 0x01
 608:	80 81       	ld	r24, Z
 60a:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_u8SetPinValue>
	DIO_u8SetPinDirection(Copy_LED_obj->PORT,Copy_LED_obj->Pin_num,DIO_u8_PIN_OUTPUT);
}

uint8_t LED_u8TurnOn(const LED_config_t *Copy_LED_obj)
{
	uint8_t Local_u8ErrorState = OK;
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	08 95       	ret
	if (Copy_LED_obj-> ConnType==SRS_conn)   /*check for the connection type*/
	{
		DIO_u8SetPinValue(Copy_LED_obj->PORT,Copy_LED_obj->Pin_num,DIO_u8_PIN_HIGH);
	}
	else if (Copy_LED_obj->ConnType==SINK_conn) /*check for the connection type*/
 612:	91 30       	cpi	r25, 0x01	; 1
 614:	39 f4       	brne	.+14     	; 0x624 <LED_u8TurnOn+0x28>
	{
		DIO_u8SetPinValue(Copy_LED_obj->PORT,Copy_LED_obj->Pin_num,DIO_u8_PIN_LOW);
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	61 81       	ldd	r22, Z+1	; 0x01
 61a:	80 81       	ld	r24, Z
 61c:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_u8SetPinValue>
	DIO_u8SetPinDirection(Copy_LED_obj->PORT,Copy_LED_obj->Pin_num,DIO_u8_PIN_OUTPUT);
}

uint8_t LED_u8TurnOn(const LED_config_t *Copy_LED_obj)
{
	uint8_t Local_u8ErrorState = OK;
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	08 95       	ret
	{
		DIO_u8SetPinValue(Copy_LED_obj->PORT,Copy_LED_obj->Pin_num,DIO_u8_PIN_LOW);
	}
	else
	{
		Local_u8ErrorState=NOK;
 624:	82 e0       	ldi	r24, 0x02	; 2
	}
	return Local_u8ErrorState;
}
 626:	08 95       	ret

00000628 <LED_u8TurnOff>:

uint8_t LED_u8TurnOff(const LED_config_t *Copy_LED_obj)
{
 628:	fc 01       	movw	r30, r24
	uint8_t Local_u8ErrorState = OK;
	if (Copy_LED_obj-> ConnType==SRS_conn) /*check for the connection type*/
 62a:	92 81       	ldd	r25, Z+2	; 0x02
 62c:	91 11       	cpse	r25, r1
 62e:	07 c0       	rjmp	.+14     	; 0x63e <LED_u8TurnOff+0x16>
	{
		DIO_u8SetPinValue(Copy_LED_obj->PORT,Copy_LED_obj->Pin_num,DIO_u8_PIN_LOW);
 630:	40 e0       	ldi	r20, 0x00	; 0
 632:	61 81       	ldd	r22, Z+1	; 0x01
 634:	80 81       	ld	r24, Z
 636:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_u8SetPinValue>
	return Local_u8ErrorState;
}

uint8_t LED_u8TurnOff(const LED_config_t *Copy_LED_obj)
{
	uint8_t Local_u8ErrorState = OK;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	08 95       	ret
	if (Copy_LED_obj-> ConnType==SRS_conn) /*check for the connection type*/
	{
		DIO_u8SetPinValue(Copy_LED_obj->PORT,Copy_LED_obj->Pin_num,DIO_u8_PIN_LOW);
	}
	else if (Copy_LED_obj->ConnType==SINK_conn) /*check for the connection type*/
 63e:	91 30       	cpi	r25, 0x01	; 1
 640:	39 f4       	brne	.+14     	; 0x650 <LED_u8TurnOff+0x28>
	{
		DIO_u8SetPinValue(Copy_LED_obj->PORT,Copy_LED_obj->Pin_num,DIO_u8_PIN_HIGH);
 642:	41 e0       	ldi	r20, 0x01	; 1
 644:	61 81       	ldd	r22, Z+1	; 0x01
 646:	80 81       	ld	r24, Z
 648:	0e 94 a9 03 	call	0x752	; 0x752 <DIO_u8SetPinValue>
	return Local_u8ErrorState;
}

uint8_t LED_u8TurnOff(const LED_config_t *Copy_LED_obj)
{
	uint8_t Local_u8ErrorState = OK;
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	08 95       	ret
	{
		DIO_u8SetPinValue(Copy_LED_obj->PORT,Copy_LED_obj->Pin_num,DIO_u8_PIN_HIGH);
	}
	else
	{
		Local_u8ErrorState=NOK;
 650:	82 e0       	ldi	r24, 0x02	; 2
	}
	return Local_u8ErrorState;
 652:	08 95       	ret

00000654 <DIO_u8SetPinDirection>:
		  case DIO_u8_PORTD: DDRD=Copy_u8Direction;break;
		  default:Local_u8ErrorState=NOK;break;
	  }
	  
	  return Local_u8ErrorState;
  }
 654:	68 30       	cpi	r22, 0x08	; 8
 656:	08 f0       	brcs	.+2      	; 0x65a <DIO_u8SetPinDirection+0x6>
 658:	76 c0       	rjmp	.+236    	; 0x746 <DIO_u8SetPinDirection+0xf2>
 65a:	41 11       	cpse	r20, r1
 65c:	3c c0       	rjmp	.+120    	; 0x6d6 <DIO_u8SetPinDirection+0x82>
 65e:	81 30       	cpi	r24, 0x01	; 1
 660:	99 f0       	breq	.+38     	; 0x688 <DIO_u8SetPinDirection+0x34>
 662:	28 f0       	brcs	.+10     	; 0x66e <DIO_u8SetPinDirection+0x1a>
 664:	82 30       	cpi	r24, 0x02	; 2
 666:	e9 f0       	breq	.+58     	; 0x6a2 <DIO_u8SetPinDirection+0x4e>
 668:	83 30       	cpi	r24, 0x03	; 3
 66a:	41 f1       	breq	.+80     	; 0x6bc <DIO_u8SetPinDirection+0x68>
 66c:	6e c0       	rjmp	.+220    	; 0x74a <DIO_u8SetPinDirection+0xf6>
 66e:	2a b3       	in	r18, 0x1a	; 26
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <DIO_u8SetPinDirection+0x26>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	6a 95       	dec	r22
 67c:	e2 f7       	brpl	.-8      	; 0x676 <DIO_u8SetPinDirection+0x22>
 67e:	80 95       	com	r24
 680:	82 23       	and	r24, r18
 682:	8a bb       	out	0x1a, r24	; 26
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	08 95       	ret
 688:	27 b3       	in	r18, 0x17	; 23
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_u8SetPinDirection+0x40>
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	6a 95       	dec	r22
 696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_u8SetPinDirection+0x3c>
 698:	80 95       	com	r24
 69a:	82 23       	and	r24, r18
 69c:	87 bb       	out	0x17, r24	; 23
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	08 95       	ret
 6a2:	24 b3       	in	r18, 0x14	; 20
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_u8SetPinDirection+0x5a>
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	6a 95       	dec	r22
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_u8SetPinDirection+0x56>
 6b2:	80 95       	com	r24
 6b4:	82 23       	and	r24, r18
 6b6:	84 bb       	out	0x14, r24	; 20
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	08 95       	ret
 6bc:	21 b3       	in	r18, 0x11	; 17
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_u8SetPinDirection+0x74>
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	6a 95       	dec	r22
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_u8SetPinDirection+0x70>
 6cc:	80 95       	com	r24
 6ce:	82 23       	and	r24, r18
 6d0:	81 bb       	out	0x11, r24	; 17
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	08 95       	ret
 6d6:	81 30       	cpi	r24, 0x01	; 1
 6d8:	91 f0       	breq	.+36     	; 0x6fe <DIO_u8SetPinDirection+0xaa>
 6da:	28 f0       	brcs	.+10     	; 0x6e6 <DIO_u8SetPinDirection+0x92>
 6dc:	82 30       	cpi	r24, 0x02	; 2
 6de:	d9 f0       	breq	.+54     	; 0x716 <DIO_u8SetPinDirection+0xc2>
 6e0:	83 30       	cpi	r24, 0x03	; 3
 6e2:	29 f1       	breq	.+74     	; 0x72e <DIO_u8SetPinDirection+0xda>
 6e4:	34 c0       	rjmp	.+104    	; 0x74e <DIO_u8SetPinDirection+0xfa>
 6e6:	2a b3       	in	r18, 0x1a	; 26
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <DIO_u8SetPinDirection+0x9e>
 6ee:	88 0f       	add	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	6a 95       	dec	r22
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <DIO_u8SetPinDirection+0x9a>
 6f6:	82 2b       	or	r24, r18
 6f8:	8a bb       	out	0x1a, r24	; 26
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	08 95       	ret
 6fe:	27 b3       	in	r18, 0x17	; 23
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	02 c0       	rjmp	.+4      	; 0x70a <DIO_u8SetPinDirection+0xb6>
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	6a 95       	dec	r22
 70c:	e2 f7       	brpl	.-8      	; 0x706 <DIO_u8SetPinDirection+0xb2>
 70e:	82 2b       	or	r24, r18
 710:	87 bb       	out	0x17, r24	; 23
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	08 95       	ret
 716:	24 b3       	in	r18, 0x14	; 20
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	02 c0       	rjmp	.+4      	; 0x722 <DIO_u8SetPinDirection+0xce>
 71e:	88 0f       	add	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	6a 95       	dec	r22
 724:	e2 f7       	brpl	.-8      	; 0x71e <DIO_u8SetPinDirection+0xca>
 726:	82 2b       	or	r24, r18
 728:	84 bb       	out	0x14, r24	; 20
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	08 95       	ret
 72e:	21 b3       	in	r18, 0x11	; 17
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_u8SetPinDirection+0xe6>
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	6a 95       	dec	r22
 73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_u8SetPinDirection+0xe2>
 73e:	82 2b       	or	r24, r18
 740:	81 bb       	out	0x11, r24	; 17
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	08 95       	ret
 746:	82 e0       	ldi	r24, 0x02	; 2
 748:	08 95       	ret
 74a:	82 e0       	ldi	r24, 0x02	; 2
 74c:	08 95       	ret
 74e:	82 e0       	ldi	r24, 0x02	; 2
 750:	08 95       	ret

00000752 <DIO_u8SetPinValue>:

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
	if(Copy_u8PinNumber<=DIO_u8_PIN7){
 752:	68 30       	cpi	r22, 0x08	; 8
 754:	08 f0       	brcs	.+2      	; 0x758 <DIO_u8SetPinValue+0x6>
 756:	78 c0       	rjmp	.+240    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		if (Copy_u8Value==DIO_u8_PIN_LOW)
 758:	41 11       	cpse	r20, r1
 75a:	3c c0       	rjmp	.+120    	; 0x7d4 <DIO_u8SetPinValue+0x82>
		{
			switch(Copy_u8Port)
 75c:	81 30       	cpi	r24, 0x01	; 1
 75e:	99 f0       	breq	.+38     	; 0x786 <DIO_u8SetPinValue+0x34>
 760:	28 f0       	brcs	.+10     	; 0x76c <DIO_u8SetPinValue+0x1a>
 762:	82 30       	cpi	r24, 0x02	; 2
 764:	e9 f0       	breq	.+58     	; 0x7a0 <DIO_u8SetPinValue+0x4e>
 766:	83 30       	cpi	r24, 0x03	; 3
 768:	41 f1       	breq	.+80     	; 0x7ba <DIO_u8SetPinValue+0x68>
 76a:	70 c0       	rjmp	.+224    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
			{
				case DIO_u8_PORTA: CLR_BIT(PORTA,Copy_u8PinNumber);break;
 76c:	2b b3       	in	r18, 0x1b	; 27
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <DIO_u8SetPinValue+0x26>
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	6a 95       	dec	r22
 77a:	e2 f7       	brpl	.-8      	; 0x774 <DIO_u8SetPinValue+0x22>
 77c:	80 95       	com	r24
 77e:	82 23       	and	r24, r18
 780:	8b bb       	out	0x1b, r24	; 27
/* IF U DON'T USE THE PORT FILE JUST UNCOMMENT THE SET_PIN_VALUE & SET_PORT_VALUE*/

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
 782:	81 e0       	ldi	r24, 0x01	; 1
	if(Copy_u8PinNumber<=DIO_u8_PIN7){
		if (Copy_u8Value==DIO_u8_PIN_LOW)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8_PORTA: CLR_BIT(PORTA,Copy_u8PinNumber);break;
 784:	08 95       	ret
				case DIO_u8_PORTB: CLR_BIT(PORTB,Copy_u8PinNumber);break;
 786:	28 b3       	in	r18, 0x18	; 24
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_u8SetPinValue+0x40>
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	6a 95       	dec	r22
 794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_u8SetPinValue+0x3c>
 796:	80 95       	com	r24
 798:	82 23       	and	r24, r18
 79a:	88 bb       	out	0x18, r24	; 24
/* IF U DON'T USE THE PORT FILE JUST UNCOMMENT THE SET_PIN_VALUE & SET_PORT_VALUE*/

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
 79c:	81 e0       	ldi	r24, 0x01	; 1
		if (Copy_u8Value==DIO_u8_PIN_LOW)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8_PORTA: CLR_BIT(PORTA,Copy_u8PinNumber);break;
				case DIO_u8_PORTB: CLR_BIT(PORTB,Copy_u8PinNumber);break;
 79e:	08 95       	ret
				case DIO_u8_PORTC: CLR_BIT(PORTC,Copy_u8PinNumber);break;
 7a0:	25 b3       	in	r18, 0x15	; 21
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_u8SetPinValue+0x5a>
 7a8:	88 0f       	add	r24, r24
 7aa:	99 1f       	adc	r25, r25
 7ac:	6a 95       	dec	r22
 7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <DIO_u8SetPinValue+0x56>
 7b0:	80 95       	com	r24
 7b2:	82 23       	and	r24, r18
 7b4:	85 bb       	out	0x15, r24	; 21
/* IF U DON'T USE THE PORT FILE JUST UNCOMMENT THE SET_PIN_VALUE & SET_PORT_VALUE*/

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
 7b6:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(Copy_u8Port)
			{
				case DIO_u8_PORTA: CLR_BIT(PORTA,Copy_u8PinNumber);break;
				case DIO_u8_PORTB: CLR_BIT(PORTB,Copy_u8PinNumber);break;
				case DIO_u8_PORTC: CLR_BIT(PORTC,Copy_u8PinNumber);break;
 7b8:	08 95       	ret
				case DIO_u8_PORTD: CLR_BIT(PORTD,Copy_u8PinNumber);break;
 7ba:	22 b3       	in	r18, 0x12	; 18
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <DIO_u8SetPinValue+0x74>
 7c2:	88 0f       	add	r24, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	6a 95       	dec	r22
 7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <DIO_u8SetPinValue+0x70>
 7ca:	80 95       	com	r24
 7cc:	82 23       	and	r24, r18
 7ce:	82 bb       	out	0x12, r24	; 18
/* IF U DON'T USE THE PORT FILE JUST UNCOMMENT THE SET_PIN_VALUE & SET_PORT_VALUE*/

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
 7d0:	81 e0       	ldi	r24, 0x01	; 1
			switch(Copy_u8Port)
			{
				case DIO_u8_PORTA: CLR_BIT(PORTA,Copy_u8PinNumber);break;
				case DIO_u8_PORTB: CLR_BIT(PORTB,Copy_u8PinNumber);break;
				case DIO_u8_PORTC: CLR_BIT(PORTC,Copy_u8PinNumber);break;
				case DIO_u8_PORTD: CLR_BIT(PORTD,Copy_u8PinNumber);break;
 7d2:	08 95       	ret
				default:Local_u8ErrorState=NOK; break;  /*Error if the given port is not founded*/
			}
		}
		else if(Copy_u8Value==DIO_u8_PIN_HIGH)
 7d4:	41 30       	cpi	r20, 0x01	; 1
 7d6:	e1 f5       	brne	.+120    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
		{
			switch(Copy_u8Port)
 7d8:	81 30       	cpi	r24, 0x01	; 1
 7da:	91 f0       	breq	.+36     	; 0x800 <__DATA_REGION_LENGTH__>
 7dc:	28 f0       	brcs	.+10     	; 0x7e8 <DIO_u8SetPinValue+0x96>
 7de:	82 30       	cpi	r24, 0x02	; 2
 7e0:	d9 f0       	breq	.+54     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7e2:	83 30       	cpi	r24, 0x03	; 3
 7e4:	29 f1       	breq	.+74     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 7e6:	36 c0       	rjmp	.+108    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
			{
				case DIO_u8_PORTA: SET_BIT(PORTA,Copy_u8PinNumber);break;
 7e8:	2b b3       	in	r18, 0x1b	; 27
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <DIO_u8SetPinValue+0xa2>
 7f0:	88 0f       	add	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	6a 95       	dec	r22
 7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <DIO_u8SetPinValue+0x9e>
 7f8:	82 2b       	or	r24, r18
 7fa:	8b bb       	out	0x1b, r24	; 27
/* IF U DON'T USE THE PORT FILE JUST UNCOMMENT THE SET_PIN_VALUE & SET_PORT_VALUE*/

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
		}
		else if(Copy_u8Value==DIO_u8_PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8_PORTA: SET_BIT(PORTA,Copy_u8PinNumber);break;
 7fe:	08 95       	ret
				case DIO_u8_PORTB: SET_BIT(PORTB,Copy_u8PinNumber);break;
 800:	28 b3       	in	r18, 0x18	; 24
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 808:	88 0f       	add	r24, r24
 80a:	99 1f       	adc	r25, r25
 80c:	6a 95       	dec	r22
 80e:	e2 f7       	brpl	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 810:	82 2b       	or	r24, r18
 812:	88 bb       	out	0x18, r24	; 24
/* IF U DON'T USE THE PORT FILE JUST UNCOMMENT THE SET_PIN_VALUE & SET_PORT_VALUE*/

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
 814:	81 e0       	ldi	r24, 0x01	; 1
		else if(Copy_u8Value==DIO_u8_PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8_PORTA: SET_BIT(PORTA,Copy_u8PinNumber);break;
				case DIO_u8_PORTB: SET_BIT(PORTB,Copy_u8PinNumber);break;
 816:	08 95       	ret
				case DIO_u8_PORTC: SET_BIT(PORTC,Copy_u8PinNumber);break;
 818:	25 b3       	in	r18, 0x15	; 21
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	02 c0       	rjmp	.+4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 820:	88 0f       	add	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	6a 95       	dec	r22
 826:	e2 f7       	brpl	.-8      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 828:	82 2b       	or	r24, r18
 82a:	85 bb       	out	0x15, r24	; 21
/* IF U DON'T USE THE PORT FILE JUST UNCOMMENT THE SET_PIN_VALUE & SET_PORT_VALUE*/

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
 82c:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(Copy_u8Port)
			{
				case DIO_u8_PORTA: SET_BIT(PORTA,Copy_u8PinNumber);break;
				case DIO_u8_PORTB: SET_BIT(PORTB,Copy_u8PinNumber);break;
				case DIO_u8_PORTC: SET_BIT(PORTC,Copy_u8PinNumber);break;
 82e:	08 95       	ret
				case DIO_u8_PORTD: SET_BIT(PORTD,Copy_u8PinNumber);break;
 830:	22 b3       	in	r18, 0x12	; 18
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	02 c0       	rjmp	.+4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 838:	88 0f       	add	r24, r24
 83a:	99 1f       	adc	r25, r25
 83c:	6a 95       	dec	r22
 83e:	e2 f7       	brpl	.-8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 840:	82 2b       	or	r24, r18
 842:	82 bb       	out	0x12, r24	; 18
/* IF U DON'T USE THE PORT FILE JUST UNCOMMENT THE SET_PIN_VALUE & SET_PORT_VALUE*/

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
 844:	81 e0       	ldi	r24, 0x01	; 1
			switch(Copy_u8Port)
			{
				case DIO_u8_PORTA: SET_BIT(PORTA,Copy_u8PinNumber);break;
				case DIO_u8_PORTB: SET_BIT(PORTB,Copy_u8PinNumber);break;
				case DIO_u8_PORTC: SET_BIT(PORTC,Copy_u8PinNumber);break;
				case DIO_u8_PORTD: SET_BIT(PORTD,Copy_u8PinNumber);break;
 846:	08 95       	ret
		}
	}
	else
	{
		/*Error Pin Number Input */
		Local_u8ErrorState =NOK;
 848:	82 e0       	ldi	r24, 0x02	; 2
 84a:	08 95       	ret
			{
				case DIO_u8_PORTA: CLR_BIT(PORTA,Copy_u8PinNumber);break;
				case DIO_u8_PORTB: CLR_BIT(PORTB,Copy_u8PinNumber);break;
				case DIO_u8_PORTC: CLR_BIT(PORTC,Copy_u8PinNumber);break;
				case DIO_u8_PORTD: CLR_BIT(PORTD,Copy_u8PinNumber);break;
				default:Local_u8ErrorState=NOK; break;  /*Error if the given port is not founded*/
 84c:	82 e0       	ldi	r24, 0x02	; 2
 84e:	08 95       	ret
			}
		}
		else
		{
			/* Error Direction Input*/
			Local_u8ErrorState =NOK;
 850:	82 e0       	ldi	r24, 0x02	; 2
 852:	08 95       	ret
			{
				case DIO_u8_PORTA: SET_BIT(PORTA,Copy_u8PinNumber);break;
				case DIO_u8_PORTB: SET_BIT(PORTB,Copy_u8PinNumber);break;
				case DIO_u8_PORTC: SET_BIT(PORTC,Copy_u8PinNumber);break;
				case DIO_u8_PORTD: SET_BIT(PORTD,Copy_u8PinNumber);break;
				default:Local_u8ErrorState=NOK;break; /*Error if the given port is not founded*/
 854:	82 e0       	ldi	r24, 0x02	; 2
	{
		/*Error Pin Number Input */
		Local_u8ErrorState =NOK;
	}
	return Local_u8ErrorState;
}
 856:	08 95       	ret

00000858 <DIO_u8SetPortValue>:

uint8_t DIO_u8SetPortValue(uint8_t Copy_u8Port,uint8_t Copy_u8Value)
{
	uint8_t Local_u8ErrorState = OK;
	switch(Copy_u8Port)
 858:	81 30       	cpi	r24, 0x01	; 1
 85a:	49 f0       	breq	.+18     	; 0x86e <__stack+0xf>
 85c:	28 f0       	brcs	.+10     	; 0x868 <__stack+0x9>
 85e:	82 30       	cpi	r24, 0x02	; 2
 860:	49 f0       	breq	.+18     	; 0x874 <__stack+0x15>
 862:	83 30       	cpi	r24, 0x03	; 3
 864:	51 f0       	breq	.+20     	; 0x87a <__stack+0x1b>
 866:	0c c0       	rjmp	.+24     	; 0x880 <__stack+0x21>
	{
		case DIO_u8_PORTA: PORTA=Copy_u8Value;break;
 868:	6b bb       	out	0x1b, r22	; 27
	return Local_u8ErrorState;
}

uint8_t DIO_u8SetPortValue(uint8_t Copy_u8Port,uint8_t Copy_u8Value)
{
	uint8_t Local_u8ErrorState = OK;
 86a:	81 e0       	ldi	r24, 0x01	; 1
	switch(Copy_u8Port)
	{
		case DIO_u8_PORTA: PORTA=Copy_u8Value;break;
 86c:	08 95       	ret
		case DIO_u8_PORTB: PORTB=Copy_u8Value;break;
 86e:	68 bb       	out	0x18, r22	; 24
	return Local_u8ErrorState;
}

uint8_t DIO_u8SetPortValue(uint8_t Copy_u8Port,uint8_t Copy_u8Value)
{
	uint8_t Local_u8ErrorState = OK;
 870:	81 e0       	ldi	r24, 0x01	; 1
	switch(Copy_u8Port)
	{
		case DIO_u8_PORTA: PORTA=Copy_u8Value;break;
		case DIO_u8_PORTB: PORTB=Copy_u8Value;break;
 872:	08 95       	ret
		case DIO_u8_PORTC: PORTC=Copy_u8Value;break;
 874:	65 bb       	out	0x15, r22	; 21
	return Local_u8ErrorState;
}

uint8_t DIO_u8SetPortValue(uint8_t Copy_u8Port,uint8_t Copy_u8Value)
{
	uint8_t Local_u8ErrorState = OK;
 876:	81 e0       	ldi	r24, 0x01	; 1
	switch(Copy_u8Port)
	{
		case DIO_u8_PORTA: PORTA=Copy_u8Value;break;
		case DIO_u8_PORTB: PORTB=Copy_u8Value;break;
		case DIO_u8_PORTC: PORTC=Copy_u8Value;break;
 878:	08 95       	ret
		case DIO_u8_PORTD: PORTD=Copy_u8Value;break;
 87a:	62 bb       	out	0x12, r22	; 18
	return Local_u8ErrorState;
}

uint8_t DIO_u8SetPortValue(uint8_t Copy_u8Port,uint8_t Copy_u8Value)
{
	uint8_t Local_u8ErrorState = OK;
 87c:	81 e0       	ldi	r24, 0x01	; 1
	switch(Copy_u8Port)
	{
		case DIO_u8_PORTA: PORTA=Copy_u8Value;break;
		case DIO_u8_PORTB: PORTB=Copy_u8Value;break;
		case DIO_u8_PORTC: PORTC=Copy_u8Value;break;
		case DIO_u8_PORTD: PORTD=Copy_u8Value;break;
 87e:	08 95       	ret
		default:Local_u8ErrorState=NOK;
 880:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return Local_u8ErrorState;
}
 882:	08 95       	ret

00000884 <DIO_u8GetPinValue>:

uint8_t DIO_u8GetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t* Copy_pu8Value)
{
	uint8_t Local_u8ErrorState =OK;
	if(Copy_u8PinNumber<=DIO_u8_PIN7)
 884:	68 30       	cpi	r22, 0x08	; 8
 886:	c0 f5       	brcc	.+112    	; 0x8f8 <DIO_u8GetPinValue+0x74>
	{
		switch(Copy_u8Port)
 888:	81 30       	cpi	r24, 0x01	; 1
 88a:	91 f0       	breq	.+36     	; 0x8b0 <DIO_u8GetPinValue+0x2c>
 88c:	28 f0       	brcs	.+10     	; 0x898 <DIO_u8GetPinValue+0x14>
 88e:	82 30       	cpi	r24, 0x02	; 2
 890:	d9 f0       	breq	.+54     	; 0x8c8 <DIO_u8GetPinValue+0x44>
 892:	83 30       	cpi	r24, 0x03	; 3
 894:	29 f1       	breq	.+74     	; 0x8e0 <DIO_u8GetPinValue+0x5c>
 896:	32 c0       	rjmp	.+100    	; 0x8fc <DIO_u8GetPinValue+0x78>
		{
			case DIO_u8_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8PinNumber) ;break;     /*Get the value og the pin*/
 898:	89 b3       	in	r24, 0x19	; 25
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <DIO_u8GetPinValue+0x1e>
 89e:	95 95       	asr	r25
 8a0:	87 95       	ror	r24
 8a2:	6a 95       	dec	r22
 8a4:	e2 f7       	brpl	.-8      	; 0x89e <DIO_u8GetPinValue+0x1a>
 8a6:	81 70       	andi	r24, 0x01	; 1
 8a8:	fa 01       	movw	r30, r20
 8aa:	80 83       	st	Z, r24
	return Local_u8ErrorState;
}

uint8_t DIO_u8GetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t* Copy_pu8Value)
{
	uint8_t Local_u8ErrorState =OK;
 8ac:	81 e0       	ldi	r24, 0x01	; 1
	if(Copy_u8PinNumber<=DIO_u8_PIN7)
	{
		switch(Copy_u8Port)
		{
			case DIO_u8_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8PinNumber) ;break;     /*Get the value og the pin*/
 8ae:	08 95       	ret
			case DIO_u8_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8PinNumber) ;break;
 8b0:	86 b3       	in	r24, 0x16	; 22
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <DIO_u8GetPinValue+0x36>
 8b6:	95 95       	asr	r25
 8b8:	87 95       	ror	r24
 8ba:	6a 95       	dec	r22
 8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <DIO_u8GetPinValue+0x32>
 8be:	81 70       	andi	r24, 0x01	; 1
 8c0:	fa 01       	movw	r30, r20
 8c2:	80 83       	st	Z, r24
	return Local_u8ErrorState;
}

uint8_t DIO_u8GetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t* Copy_pu8Value)
{
	uint8_t Local_u8ErrorState =OK;
 8c4:	81 e0       	ldi	r24, 0x01	; 1
	if(Copy_u8PinNumber<=DIO_u8_PIN7)
	{
		switch(Copy_u8Port)
		{
			case DIO_u8_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8PinNumber) ;break;     /*Get the value og the pin*/
			case DIO_u8_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8PinNumber) ;break;
 8c6:	08 95       	ret
			case DIO_u8_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8PinNumber) ;break;
 8c8:	83 b3       	in	r24, 0x13	; 19
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <DIO_u8GetPinValue+0x4e>
 8ce:	95 95       	asr	r25
 8d0:	87 95       	ror	r24
 8d2:	6a 95       	dec	r22
 8d4:	e2 f7       	brpl	.-8      	; 0x8ce <DIO_u8GetPinValue+0x4a>
 8d6:	81 70       	andi	r24, 0x01	; 1
 8d8:	fa 01       	movw	r30, r20
 8da:	80 83       	st	Z, r24
	return Local_u8ErrorState;
}

uint8_t DIO_u8GetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t* Copy_pu8Value)
{
	uint8_t Local_u8ErrorState =OK;
 8dc:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(Copy_u8Port)
		{
			case DIO_u8_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8PinNumber) ;break;     /*Get the value og the pin*/
			case DIO_u8_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8PinNumber) ;break;
			case DIO_u8_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8PinNumber) ;break;
 8de:	08 95       	ret
			case DIO_u8_PORTD:*Copy_pu8Value=GET_BIT(PIND,Copy_u8PinNumber) ;break;
 8e0:	80 b3       	in	r24, 0x10	; 16
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <DIO_u8GetPinValue+0x66>
 8e6:	95 95       	asr	r25
 8e8:	87 95       	ror	r24
 8ea:	6a 95       	dec	r22
 8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <DIO_u8GetPinValue+0x62>
 8ee:	81 70       	andi	r24, 0x01	; 1
 8f0:	fa 01       	movw	r30, r20
 8f2:	80 83       	st	Z, r24
	return Local_u8ErrorState;
}

uint8_t DIO_u8GetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t* Copy_pu8Value)
{
	uint8_t Local_u8ErrorState =OK;
 8f4:	81 e0       	ldi	r24, 0x01	; 1
		switch(Copy_u8Port)
		{
			case DIO_u8_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8PinNumber) ;break;     /*Get the value og the pin*/
			case DIO_u8_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8PinNumber) ;break;
			case DIO_u8_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8PinNumber) ;break;
			case DIO_u8_PORTD:*Copy_pu8Value=GET_BIT(PIND,Copy_u8PinNumber) ;break;
 8f6:	08 95       	ret
			default:Local_u8ErrorState=NOK;break; /*Error if the given port is not founded*/
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
 8f8:	82 e0       	ldi	r24, 0x02	; 2
 8fa:	08 95       	ret
		{
			case DIO_u8_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8PinNumber) ;break;     /*Get the value og the pin*/
			case DIO_u8_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8PinNumber) ;break;
			case DIO_u8_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8PinNumber) ;break;
			case DIO_u8_PORTD:*Copy_pu8Value=GET_BIT(PIND,Copy_u8PinNumber) ;break;
			default:Local_u8ErrorState=NOK;break; /*Error if the given port is not founded*/
 8fc:	82 e0       	ldi	r24, 0x02	; 2
	{
		Local_u8ErrorState=NOK;
	}
	return Local_u8ErrorState;
	
 8fe:	08 95       	ret

00000900 <_exit>:
 900:	f8 94       	cli

00000902 <__stop_program>:
 902:	ff cf       	rjmp	.-2      	; 0x902 <__stop_program>
